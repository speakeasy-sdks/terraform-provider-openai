// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"openai/internal/sdk"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"openai/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CompletionDataSource{}
var _ datasource.DataSourceWithConfigure = &CompletionDataSource{}

func NewCompletionDataSource() datasource.DataSource {
	return &CompletionDataSource{}
}

// CompletionDataSource is the data source implementation.
type CompletionDataSource struct {
	client *sdk.SDK
}

// CompletionDataSourceModel describes the data model.
type CompletionDataSourceModel struct {
	BestOf           types.Int64                       `tfsdk:"best_of"`
	Choices          []CreateCompletionResponseChoices `tfsdk:"choices"`
	Created          types.Int64                       `tfsdk:"created"`
	Echo             types.Bool                        `tfsdk:"echo"`
	FrequencyPenalty types.Number                      `tfsdk:"frequency_penalty"`
	ID               types.String                      `tfsdk:"id"`
	LogitBias        map[string]types.Int64            `tfsdk:"logit_bias"`
	Logprobs         types.Int64                       `tfsdk:"logprobs"`
	MaxTokens        types.Int64                       `tfsdk:"max_tokens"`
	Model            types.String                      `tfsdk:"model"`
	N                types.Int64                       `tfsdk:"n"`
	Object           types.String                      `tfsdk:"object"`
	PresencePenalty  types.Number                      `tfsdk:"presence_penalty"`
	Prompt           CreateCompletionRequestPrompt     `tfsdk:"prompt"`
	Stop             *CreateCompletionRequestStop      `tfsdk:"stop"`
	Stream           types.Bool                        `tfsdk:"stream"`
	Suffix           types.String                      `tfsdk:"suffix"`
	Temperature      types.Number                      `tfsdk:"temperature"`
	TopP             types.Number                      `tfsdk:"top_p"`
	Usage            *CreateCompletionResponseUsage    `tfsdk:"usage"`
	User             types.String                      `tfsdk:"user"`
}

// Metadata returns the data source type name.
func (r *CompletionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_completion"
}

// Schema defines the schema for the data source.
func (r *CompletionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Completion DataSource",

		Attributes: map[string]schema.Attribute{
			"best_of": schema.Int64Attribute{
				Optional: true,
				MarkdownDescription: `Generates ` + "`" + `best_of` + "`" + ` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.` + "\n" +
					`` + "\n" +
					`When used with ` + "`" + `n` + "`" + `, ` + "`" + `best_of` + "`" + ` controls the number of candidate completions and ` + "`" + `n` + "`" + ` specifies how many to return â€“ ` + "`" + `best_of` + "`" + ` must be greater than ` + "`" + `n` + "`" + `.` + "\n" +
					`` + "\n" +
					`**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for ` + "`" + `max_tokens` + "`" + ` and ` + "`" + `stop` + "`" + `.` + "\n" +
					``,
			},
			"choices": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"finish_reason": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"stop",
									"length",
								),
							},
							Description: `must be one of [stop, length]`,
						},
						"index": schema.Int64Attribute{
							Computed: true,
						},
						"text": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"created": schema.Int64Attribute{
				Computed: true,
			},
			"echo": schema.BoolAttribute{
				Optional: true,
				MarkdownDescription: `Echo back the prompt in addition to the completion` + "\n" +
					``,
			},
			"frequency_penalty": schema.NumberAttribute{
				Optional: true,
				MarkdownDescription: `Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.` + "\n" +
					`` + "\n" +
					`[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)` + "\n" +
					``,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"logit_bias": schema.MapAttribute{
				Optional:    true,
				ElementType: types.Int64Type,
				MarkdownDescription: `Modify the likelihood of specified tokens appearing in the completion.` + "\n" +
					`` + "\n" +
					`Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.` + "\n" +
					`` + "\n" +
					`As an example, you can pass ` + "`" + `{"50256": -100}` + "`" + ` to prevent the <|endoftext|> token from being generated.` + "\n" +
					``,
			},
			"logprobs": schema.Int64Attribute{
				Optional: true,
				MarkdownDescription: `Include the log probabilities on the ` + "`" + `logprobs` + "`" + ` most likely tokens, as well the chosen tokens. For example, if ` + "`" + `logprobs` + "`" + ` is 5, the API will return a list of the 5 most likely tokens. The API will always return the ` + "`" + `logprob` + "`" + ` of the sampled token, so there may be up to ` + "`" + `logprobs+1` + "`" + ` elements in the response.` + "\n" +
					`` + "\n" +
					`The maximum value for ` + "`" + `logprobs` + "`" + ` is 5.` + "\n" +
					``,
			},
			"max_tokens": schema.Int64Attribute{
				Optional: true,
				MarkdownDescription: `The maximum number of [tokens](/tokenizer) to generate in the completion.` + "\n" +
					`` + "\n" +
					`The token count of your prompt plus ` + "`" + `max_tokens` + "`" + ` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.` + "\n" +
					``,
			},
			"model": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"text-davinci-003",
						"text-davinci-002",
						"text-davinci-001",
						"code-davinci-002",
						"text-curie-001",
						"text-babbage-001",
						"text-ada-001",
					),
				},
				MarkdownDescription: `must be one of [text-davinci-003, text-davinci-002, text-davinci-001, code-davinci-002, text-curie-001, text-babbage-001, text-ada-001]` + "\n" +
					`ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.` + "\n" +
					``,
			},
			"n": schema.Int64Attribute{
				Optional: true,
				MarkdownDescription: `How many completions to generate for each prompt.` + "\n" +
					`` + "\n" +
					`**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for ` + "`" + `max_tokens` + "`" + ` and ` + "`" + `stop` + "`" + `.` + "\n" +
					``,
			},
			"object": schema.StringAttribute{
				Computed: true,
			},
			"presence_penalty": schema.NumberAttribute{
				Optional: true,
				MarkdownDescription: `Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.` + "\n" +
					`` + "\n" +
					`[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)` + "\n" +
					``,
			},
			"prompt": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"str": schema.StringAttribute{
						Optional: true,
					},
					"array_ofstr": schema.ListAttribute{
						Optional:    true,
						ElementType: types.StringType,
					},
					"array_ofinteger": schema.ListAttribute{
						Optional:    true,
						ElementType: types.Int64Type,
					},
					"array_ofarray_ofinteger": schema.ListAttribute{
						Optional: true,
						ElementType: types.ListType{
							ElemType: types.Int64Type,
						},
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				MarkdownDescription: `The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.` + "\n" +
					`` + "\n" +
					`Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.` + "\n" +
					``,
			},
			"stop": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"str": schema.StringAttribute{
						Optional: true,
					},
					"array_ofstr": schema.ListAttribute{
						Optional:    true,
						ElementType: types.StringType,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				MarkdownDescription: `Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.` + "\n" +
					``,
			},
			"stream": schema.BoolAttribute{
				Optional: true,
				MarkdownDescription: `Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a ` + "`" + `data: [DONE]` + "`" + ` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).` + "\n" +
					``,
			},
			"suffix": schema.StringAttribute{
				Optional:    true,
				Description: `The suffix that comes after a completion of inserted text.`,
			},
			"temperature": schema.NumberAttribute{
				Optional: true,
				MarkdownDescription: `What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.` + "\n" +
					`` + "\n" +
					`We generally recommend altering this or ` + "`" + `top_p` + "`" + ` but not both.` + "\n" +
					``,
			},
			"top_p": schema.NumberAttribute{
				Optional: true,
				MarkdownDescription: `An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.` + "\n" +
					`` + "\n" +
					`We generally recommend altering this or ` + "`" + `temperature` + "`" + ` but not both.` + "\n" +
					``,
			},
			"usage": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"completion_tokens": schema.Int64Attribute{
						Computed: true,
					},
					"prompt_tokens": schema.Int64Attribute{
						Computed: true,
					},
					"total_tokens": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"user": schema.StringAttribute{
				Optional: true,
				MarkdownDescription: `A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).` + "\n" +
					``,
			},
		},
	}
}

func (r *CompletionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CompletionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CompletionDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToGetSDKType()
	res, err := r.client.OpenAI.CreateCompletion(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.CreateCompletionResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.CreateCompletionResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
