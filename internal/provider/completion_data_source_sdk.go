// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"openai/internal/sdk/pkg/models/shared"
)

func (r *CompletionDataSourceModel) ToGetSDKType() *shared.CreateCompletionRequest {
	bestOf := new(int64)
	if !r.BestOf.IsUnknown() && !r.BestOf.IsNull() {
		*bestOf = r.BestOf.ValueInt64()
	} else {
		bestOf = nil
	}
	echo := new(bool)
	if !r.Echo.IsUnknown() && !r.Echo.IsNull() {
		*echo = r.Echo.ValueBool()
	} else {
		echo = nil
	}
	frequencyPenalty := new(float64)
	if !r.FrequencyPenalty.IsUnknown() && !r.FrequencyPenalty.IsNull() {
		*frequencyPenalty, _ = r.FrequencyPenalty.ValueBigFloat().Float64()
	} else {
		frequencyPenalty = nil
	}
	logitBias := make(map[string]int64)
	// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
	logprobs := new(int64)
	if !r.Logprobs.IsUnknown() && !r.Logprobs.IsNull() {
		*logprobs = r.Logprobs.ValueInt64()
	} else {
		logprobs = nil
	}
	maxTokens := new(int64)
	if !r.MaxTokens.IsUnknown() && !r.MaxTokens.IsNull() {
		*maxTokens = r.MaxTokens.ValueInt64()
	} else {
		maxTokens = nil
	}
	model := shared.CreateCompletionRequestModel(r.Model.ValueString())
	n := new(int64)
	if !r.N.IsUnknown() && !r.N.IsNull() {
		*n = r.N.ValueInt64()
	} else {
		n = nil
	}
	presencePenalty := new(float64)
	if !r.PresencePenalty.IsUnknown() && !r.PresencePenalty.IsNull() {
		*presencePenalty, _ = r.PresencePenalty.ValueBigFloat().Float64()
	} else {
		presencePenalty = nil
	}
	prompt := r.Prompt.ValueString()
	stream := new(bool)
	if !r.Stream.IsUnknown() && !r.Stream.IsNull() {
		*stream = r.Stream.ValueBool()
	} else {
		stream = nil
	}
	suffix := new(string)
	if !r.Suffix.IsUnknown() && !r.Suffix.IsNull() {
		*suffix = r.Suffix.ValueString()
	} else {
		suffix = nil
	}
	temperature := new(float64)
	if !r.Temperature.IsUnknown() && !r.Temperature.IsNull() {
		*temperature, _ = r.Temperature.ValueBigFloat().Float64()
	} else {
		temperature = nil
	}
	topP := new(float64)
	if !r.TopP.IsUnknown() && !r.TopP.IsNull() {
		*topP, _ = r.TopP.ValueBigFloat().Float64()
	} else {
		topP = nil
	}
	user := new(string)
	if !r.User.IsUnknown() && !r.User.IsNull() {
		*user = r.User.ValueString()
	} else {
		user = nil
	}
	out := shared.CreateCompletionRequest{
		BestOf:           bestOf,
		Echo:             echo,
		FrequencyPenalty: frequencyPenalty,
		LogitBias:        logitBias,
		Logprobs:         logprobs,
		MaxTokens:        maxTokens,
		Model:            model,
		N:                n,
		PresencePenalty:  presencePenalty,
		Prompt:           prompt,
		Stream:           stream,
		Suffix:           suffix,
		Temperature:      temperature,
		TopP:             topP,
		User:             user,
	}
	return &out
}

func (r *CompletionDataSourceModel) RefreshFromGetResponse(resp *shared.CreateCompletionResponse) {
	r.Choices = nil
	for _, choicesItem := range resp.Choices {
		var choices1 CreateCompletionResponseChoices
		choices1.FinishReason = types.StringValue(string(choicesItem.FinishReason))
		choices1.Index = types.Int64Value(choicesItem.Index)
		choices1.Text = types.StringValue(choicesItem.Text)
		r.Choices = append(r.Choices, choices1)
	}
	r.Created = types.Int64Value(resp.Created)
	r.ID = types.StringValue(resp.ID)
	r.Model = types.StringValue(string(resp.Model))
	r.Object = types.StringValue(resp.Object)
	if r.Usage == nil {
		r.Usage = &CreateCompletionResponseUsage{}
	}
	if resp.Usage == nil {
		r.Usage = nil
	} else {
		r.Usage = &CreateCompletionResponseUsage{}
		r.Usage.CompletionTokens = types.Int64Value(resp.Usage.CompletionTokens)
		r.Usage.PromptTokens = types.Int64Value(resp.Usage.PromptTokens)
		r.Usage.TotalTokens = types.Int64Value(resp.Usage.TotalTokens)
	}
}
